#!/usr/bin/env python 
# At least on the mac, I really don't trust python to be in a consistent 
# place, so I'm using the path.

import os.path
import sys
from optparse import OptionParser
from dataflow import *

enable_debugging = 0

(program_directory, program_name) = os.path.split(sys.argv[0])
help_string = """
%s excerpts a section of a file and writes it to standard output.
Which section to excerpt is specified by a line interval (which
lines to print, beginning (inclusive) to end (exclusive)) or a 
byte interval.  -1 in either case means the line/byte after the end 
of the file (i.e. no end to the interval).
Default is not to print anything.""" % (program_name, )

usage_string = "%s [-l firstline,lastlinep1]* [-b firstbyte,lastbytep1] <input_file>"

parser = OptionParser(description=help_string, usage=usage_string)
parser.add_option("-?", action="help")
parser.add_option("-D", "--debug", help="Enable script debugging",
                  type="int", dest="debug", default=0, metavar="DBGLVL")
parser.add_option("-l", "--line-interval", action="append", dest="lints",
                  help="Window specified as an line interval in the file",
                  metavar="STARTLINE,ENDLINE", default=[])
parser.add_option("-b", "--byte-interval", action="append", dest="bints",
                  help="Window specified as an line interval in the file",
                  metavar="STARTBYTE,ENDBYTE", default=[])
## Further options here; template follows.  
## All args are optional; if action is store_true/false, no extra
## args are consumed.
## parser.add_option({opts-short or long}, ..., dest={}, help={},
##		     type={}, default={}, metavar={},
##		     nargs={}, choices={}, callback={}, 

(options, args) = parser.parse_args()

# Setup the dataflow graph for all the intervals

rootDFN = SplitDFN()
for i in options.lints:
    pint = map(int, i.split(","))
    s = StreamDFN()
    s.append(RecordIntervalDFN(pint))
    s.append(BatchRecordDFN(0))
    s.append(SinkDFN(lambda r: map(sys.stdout.write, r)))
    rootDFN.addOutput(s)

for i in options.bints:
    pint = map(int, i.split(","))
    s = StreamDFN()
    s.append(ByteIntervalDFN(pint))
    s.append(BatchRecordDFN(0))
    s.append(SinkDFN(lambda r: map(sys.stdout.write, r)))
    rootDFN.addOutput(s)
    
# Shove all input lines through the dataflow graph
if args:
    for f in args:
        inp = open(f)
        for line in inp:
            rootDFN.input(line)
    rootDFN.eos()
else:
    for line in sys.stdin:
        rootDFN.input(line)
    rootDFN.eos()


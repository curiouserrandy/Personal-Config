#!/usr/bin/perl -w

# Copyright (C) 1999 Randall David Smith
# This file is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.

$progname=$0;
$helpstring = <<"HelpString";
$progname parses a Randy-style todo file, extracting specific pieces of that
file.  The flags currently understood are:
	-x	Print out completed items (default)
	-u	Print out uncompleted items
	-c	Squeeze out extra newlines in the result.    
HelpString
;				# Tail off emacs commenting 

$usageString="$progname [-x|-u] -c";

# Parse all the arguments.
# Initialize argument flag values here.

$done="yes";
$compress="no";
ARGS: while (scalar(@ARGV) > 0 && $ARGV[0] =~ /^-/) { # For all flag args
    ($_ = shift) =~ s/^-//;	# Get just argument without -
    (/^x$/) && do {
	$done="yes";
	next ARGS;
    };
    (/^u$/) && do {
	$done="no";
	next ARGS;
    };
    (/^c$/) && do {
	$compress="yes";
	next ARGS;
    };

    # Print help if requested, recognize "--" as indicating end of flag
    # arguments, and error out on an unknown argument.
    (/^h(elp)?$/ || /^\?$/) && do { print $helpstring; exit 0; };
    /^-$/ && last;
    die "Usage: $usageString";
}

# Process any non-flag arguments
print @ARGV;
die "Usage: $usageString" if (scalar(@ARGV) > 0);

$/="";

while (<>) {
    chop if ($compress eq "yes" && /\n\n$/);

    print if (/^X/ && $done eq "yes");
    print if (!/^X/ && $done eq "no");
}


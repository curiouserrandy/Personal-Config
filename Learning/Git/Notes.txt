## -*-mode: Outline; fill-prefix: "   ";-*-

* Web docs

-- Main page: git-scm.org
-- Git community book: http://book.git-scm.com/
-- Git User's Manual:
   http://www.kernel.org/pub/software/scm/git/docs/user-manual.html
-- Git for CS: http://eagain.net/articles/git-for-computer-scientists/
-- Alterantive book: http://www-cs-students.stanford.edu/~blynn/gitmagic/   
-- Ref man (man git): http://www.kernel.org/pub/software/scm/git/docs/   

* Definitions

	* bare repository (I think this is one without any source
   	  checked out, or a place for it; i.e. just .git by itself)
	* Working tree
	* tag
	* branch
	* object: ?
	* blob: blob object name
	* tree: tree object name
	* commit: commit object name
	* tree-ish: tree, commit, or tag object name.  Tag/commit will
   	  be derferences to point at tree.
	* commit-ish: commit or tag object name.  Tag will be
   	  dereferenced to point at commit.
	* type: One of blob, tree, commit, or tag.
	* file: Filename, almost always relative to root of the tree
   	  structure GIT_INDEX_FILE (usually $GIT_DIR/index) describes.
   

* Answered questions

Information here should be elsewhere in the doc, or basic enough in
your head that you won't need to look here again.  

X?? How can I either nuke a portion of a repository, or clone the
   repository without a particular set of files?

   My sense is that this is, in a basic way, not possible.  You can
   only checkout a particular set of files, but if you have a commit,
   you have the tree that it points to and all the blobs that it
   points to, and playing with that pointer chain means violating
   git's basic consistency model.

   What use case prompted this question?  I think it was that I wanted
   to clone my Config directory minus the NetApp stuff.  General case:
   Exporting a subset of a project for working on with larger group of
   people.  I think that's gotta lose the revision history.

X?? How do I in general avoid piping git output into a pager?  I think
   I've solved this problem before; may want to look around personal
   laptop. 

   Yeah, there's a series of things controlling this.  I should write
   it up in a cheat sheet.



X!! It looks as if git-clone "just" copies a repository and refreshes
   the index!  When I grok why that works ok, I'll be a much happier
   camper.  Ok, let's work it through.  If we ignore refs, all we have
   is a DAG with many heads, and each object is uniquely identified
   globally.  So if we try and do a merge between two objects, we'll
   always be able to figure out how to do it, no matter where the
   objects came from.  So that explains what "git fetch" does; it
   creates the new chain in the repository and points FETCH_HEAD
   (sic?) at it, and nothing more.  If it does something funky, it's
   with symbolic refs, and effectively is a fast-forward merge (i.e. a
   head retarget).  I think I'm beginning to get this.

   Note that index files are tricky; they don't necessarily copy well,
   because they include information on file stat times and mods.  So
   they need to be rebuilt on a copy.

   Take home: It's fine to juts copy a repository.  But it's looking
   like it's going to be hell to peel off all references to a file in
   a repository.  Pity.

* Git command list, with 1-line annotations

** Porcelain   

## Understand and use
-- git-add
-- git-clone
-- git-commit
-- git-init
-- git-status
-- git-help

## Use, but would like to understand better   
-- git-rev-parse: Pick out and massage parameters.
   
?? Solidly grok and take notes on the format of a revision list.    

-- git-checkout
   
?? What happens to changes in the index on a git checkout?
?? What happens to files modified but not yet in the index in a git
   checkout? 
?? Does git checkout delete files?
?? What does checkout do to modified files in the directory?  I think
   it leaves them alone (though obviously the diff will change)?

?? What does checkout do to modifications saved in the index?  Do they
   survive a checkout and a check-back?


-- git-svn: Bidirectional operation between a single Subversion branch and git.

?? What exactly am I doing with the git svn bridge I setup for chrome?  
?? At what point does the git/svn tranformation occur?

   (I'm guessing the local copy looks like git, and the remote like
   SVN, and thus that it's only "git fetch" that is different.
   Further guess: For the remote svn branch, you need to do a git svn
   fetch, and git pull automatically does that when it's trying to do
   a fetch on a svn tracking branch.  Worth confirming all these
   guesses :-}.)   

-- git-branch
-- git-pull
-- git-push
-- git-fetch
-- git-remote: manage set of tracked repositories.

?? What precisely happens on a git fetch
?? How is the merge implied by a git pull specified
?? How does git fetch/pull integrate with git svn.

?? Different between remotes and origin?
?? How can origin refer to a repository?  That's not an object type
   (as I so far understand it).  Maybe "origin" is a subdir of refs? 

?? IF you assign a name with "git remote" and do a git fetch with
   that, the tutorial implies it just updates <remote>/master, but
   what if work's been done on aother branches in the repository?  My
   guess is that git fetch only fetchs a single branch; should be
   confirmed.  

?? Tutorial is a little confusing; what's teh difference between git
   merge bob/master and git pull . remotes/bob/master??  Gotta read
   git-pull and such in more detail.

-- git-log

?? Would like to grok "git log --graph" and understand how I'd like to
   incorporate it into my work flow.

-- git-diff
-- git-merge

?? What formats can I get diff output in?
?? How do I specify diffs for each of the three areas I'd like to diff
   between?
?? What's the syntax for a merge specification?
 
-- git-grep

?? Range of options for use

-- git-config: Get and set repository or global options.
   
?? Range of options for use

-- git-cherry-pick: Apply the change introduced by an existing commit.
   
-- git-blame
-- git-annotate
   
-- git-revert: Revert an existing commit.

## Want to learn more   
-- git-citool: Graphical alternative to git-commit.  ?? Rel to gui
-- git-gui: A portable graphical interface to Git.
-- gitk: The git repository browser.

?? Range of options for use, relationship between commands

-- git-clean: Remove untracked files from the working tree.  ?? Rel to gc
-- git-gc: Cleanup unnecessary files and optimize the local repository.
-- git-pack-refs: Pack heads and tags for efficient repository access.
-- git-prune: Prune all unreachable objects from the object database.
-- git-repack: Pack unpacked objects in a repository.
-- git-count-objects: Count unpacked number of objects and their disk consumption.
-- git-fsck: Verifies the connectivity and validity of database.

?? Relationship between commands, what do I want as part of normal
   workflow. 

-- git-mv: Move or rename a file, a directory, or a symlink.
-- git-rm: Remove files from the working tree and from the index.
   
?? Effects?  How are these different from doing rm or mv followed by
   usual add commands; any difference?  I'm guessing no.

-- git-rebase: Forward-port local commits to the updated upstream head.
   
?? Workflow?
   
-- git-shortlog: Summarize git-log output.
   
?? Workflow?
   
-- git-reset: Reset current HEAD to the specified state.
   
-- git-mergetool: Run external mergetool to resolve conflicts.

-- git-cherry: Find commits not merged upstream.   

-- git-rerere: Reuse recorded resolution of conflicted merges.

-- git-show-branch: Show branches and their commits.

?? Relationship to git branch?  This is graphical, I think.  Way to
   get output showing only divergences and convergence (maybe with
   relative commit descriptions?)
   
-- git-whatchanged: Show logs with difference each commit introduces.

-- git-request-pull: Generates a summary of pending changes.

## Have basic idea, and that's good enough
-- git-am: Apply a patch
-- git-archive: Create an archive of files from a named tree.
-- git-get-tar-commit-id: Extract commit ID from an git-archive archive
-- git-bundle: Move objects and refs by archive.
-- git-format-patch: Prepare patches for e-mail submission.
-- git-show: Show various types of objects.
-- git-stash: Stash the changes in a dirty working directory away.
-- git-relink: Hardlink common objects in local repositories.

## Don't understand, that's ok for now   
-- git-describe: Show the most recent tag that is reachable from a commit.
-- git-submodule: Initialize, update or inspect submodules.
-- git-tag: Create, list, delete or verify a tag object signed with GPG.
-- git-fast-export: Git data exporter.
-- git-fast-import: Backend for fast Git data importers.
-- git-filter-branch: Rewrite branches.
-- git-reflog: Manage reflog information.
-- git-instaweb: Instantly browse your working repository in gitweb.
-- git-merge-tree: Show three-way merge without touching index.
-- git-verify-tag: Check the GPG signature of tags.
-- git-archimport: Import an Arch repository into git.
-- git-cvsexportcommit: Export a single commit to a CVS checkout.
-- git-cvsimport: Salvage your data out of another SCM people love to hate.
-- git-cvsserver: A CVS server emulator for git.
-- git-imap-send: Send a collection of patches from stdin to an IMAP folder.
-- git-quiltimport: Applies a quilt patchset onto the current branch.
-- git-send-email: Send a collection of patches as emails.

** Plumbing
## Manipulation commands
-- git-apply: Apply a patch on a git index file and a working tree.
-- git-checkout-index: Copy files from the index to the working tree.
-- git-commit-tree: Create a new commit object.
-- git-hash-object: Compute object ID and optionally creates a blob from a file.
-- git-index-pack: Build pack index file for an existing packed archive.
-- git-merge-file: Run a three-way file merge.
-- git-merge-index: Run a merge for files needing merging.
-- git-mktag: Creates a tag object.
-- git-mktree: Build a tree-object from ls-tree formatted text.
-- git-pack-objects: Create a packed archive of objects.
-- git-prune-packed: Remove extra objects that are already in pack files.
-- git-read-tree: Reads tree information into the index.
-- git-symbolic-ref: Read and modify symbolic refs.
-- git-unpack-objects: Unpack objects from a packed archive.
-- git-update-index: Register file contents in the working tree to the index.
-- git-update-ref: Update the object name stored in a ref safely.
-- git-write-tree: Create a tree object from the current index.
   
## Interrogation commands
-- git-cat-file: Provide content or type/size information for repository objects.
-- git-diff-files: Compares files in the working tree and the index.
-- git-diff-index: Compares content and mode of blobs between the index and repository.
-- git-diff-tree: Compares the content and mode of blobs found via two tree objects.
-- git-for-each-ref: Output information on each ref.
-- git-ls-files: Show information about files in the index and the working tree.
-- git-ls-remote: List references in a remote repository.
-- git-ls-tree: List the contents of a tree object.
-- git-merge-base: Find as good common ancestors as possible for a merge.
-- git-name-rev: Find symbolic names for given revs.
-- git-pack-redundant: Find redundant pack files.
-- git-rev-list: Lists commit objects in reverse chronological order.
-- git-show-index: Show packed archive index.
-- git-show-ref: List references in a local repository.
-- git-unpack-file: Creates a temporary file with a blob's contents.
-- git-var: Show a git logical variable.
-- git-verify-pack: Validate packed git archive files.

## Synching repositories
-- git-daemon: A really simple server for git repositories.
-- git-fetch-pack: Receive missing objects from another repository.
-- git-send-pack: Push objects over git protocol to another repository.
-- git-update-server-info: Update auxiliary info file to help dumb servers.

## Internal commands
-- git-http-fetch: Download from a remote git repository via HTTP.
-- git-http-push: Push objects over HTTP/DAV to another repository.
-- git-parse-remote: Routines to help parsing remote repository access parameters.
-- git-receive-pack: Receive what is pushed into the repository.
-- git-shell: Restricted login shell for GIT-only SSH access.
-- git-upload-archive: Send archive back to git-archive.
-- git-upload-pack: Send objects packed back to git-fetch-pack.
-- git-check-attr: Display gitattributes information.
-- git-check-ref-format: Make sure ref name is well formed.
-- git-fmt-merge-msg: Produce a merge commit message.
-- git-mailinfo: Extracts patch and authorship from a single e-mail message.
-- git-mailsplit: Simple UNIX mbox splitter program.
-- git-merge-one-file: The standard helper program to use with git-merge-index.
-- git-patch-id: Compute unique ID for a patch.
-- git-peek-remote: (deprecated) List the references in a remote repository.
-- git-sh-setup: Common git shell script setup code.
-- git-stripspace: Filter out empty lines.

   

* Git proper

An object is the unit of storage in git.  It it uniquely identified
(named) by the SHA1 of its contents, and cannot be changed.  Objects
may be blobs, trees, commits, or tags.  These are:
	* blobs: File contents
	* commits: A single point in git history.  Contains references
	  to all parents (all other commits that contributed to it as
	  ancestors). 
	* tag: ?
	* tree: An object consisting of a list of file names and modes
	  along with refs to the associated blobs or tree objects
	  (i.e. a tree object represents a difrectory.)
Objects are reachable from a given object if we can follow tags to
whatever they tag, commits to their parents or trees (??), and trees
to the trees or blobs that they contain.  tree-ish objects are things
from which a tree can be inferred (tree, tag, commit).

A branch is an active line of development.  Commits are on a branch;
the most recent commit is referred to as the tip of that branch, and
is referenced by a branhc head, which moves forward as additional
development is done on the branch.  A repository can have multiple
branches, but the working tree is associated with just one), which
HEAD points to.  HEAD may be "detached" if you've checked out a commit
that isn't the tip of any branch; in this case HEAD points at a
non-tip commit (?? What are the implications?).  Branch names by
custom/default are master (for the local development) and origin
(which really names the repository from which the current repository
was cloned; it can have several branches.)  Tracking branches are used
to track other lines of development; no changes not pulled are done on
them.  

New branches are created with git branch, and are switched to
(changing the working directory to reflect the new branch (with git
checkout).  git branch -d can delete branches (which confirms that
everything's safely moved in).  -D nukes it (without checking).

Pulling a branch means fetching it from a remote repository (updating
origin/<branchname> or possibly some other non-default local branch)
and merging that branch.  Pushing a branch means getting the branch's
head ref from a remote repository, figure out if it's a direct
ancestor to the branch's local head ref, andin that case updating the
remote repository.  It fails if the remote head is not an ancestor to
the local head.

A ref is an object name that denotes a particular object.  I think
that they're often referred to as refs/<?>/name
(e.g. refs/heads/master), so I conjecture that their namespace is
.git/ |refs/...|
Reference specs (refspecs) are used by fetch and push to describe the
mapping between remote ref and local ref. [+]<src>:<dst>.  The example
given was refs/heads/master or refs/heads/origin.  (??)  A symref
refers to a ref through the refs namespace.

A tag is an object containing a ref pointing to another object.  It
can contain a message (like a commit object) or PGP signature (in
which case it's a signed tag object").

The index is the stored version of the working tree (possibly with
multiple versions which will be used when merging).  Things are added
ot the index with "git add"; changes made in the working directory are
not included in the index until git add is used.  Note that changes
made after git add are also not included in the index until the next
git add; git add takes a snapshot.  git commit with a list of names
can add those files to the index before commit.  git commit -a gets
all modified (but not new) files.

A merge is bringing changes from on branch into another; if they share
a common ancestor, the merge will be done.  If there are no conflicts,
a merge will also do a commit.  If there are conflicts, the conflicts
will need to be resolved by hand, "git add" used to put them into the
index, and "git commit" used to commit them.  

?? I have this vague memory that there are special things you can do
   in the time between conflict and resolution through git add?

A fast-forward merge is a type of merge where a the changings being
merged are a descendant of the commits already present (presumbly of
the head commit).  In this case all that happens is an update of the
branch pointer.

Grafts are for merging two different lines of development by recording
fake ancestry information.

-- git-log --graph: Graphical display of commits and merges in a
   repository. 

Note that git fetch just gets the objects, and points FETCH_HEAD at
them; to do something with that you need to do a git merge.  If git
fetch is executed with a remote name setup with "git remote", then it
updates the local tracking branch for the remote (but presumably also
points FETCH_HEAD at it.)  

== Notation

<commit-ref-1>..<commit-ref-2>: [Two dot form] All commits (?)
reachable from commit-ref-2 but not from commit-ref-1.  Can be a range
on a single line of development, but by implication doesn't have to
be.

<commit-ref-1>..	: Commits since commit-ref-1, or commits not
   			  reachable from commit-ref-1? (??)

<commit-ref-1>...<commit-ref-2>: [Three dot form] All commits (?)
reachable from either commit-ref-1 or commit-ref-2 but not both.  

Commits can be referenced by:
	* Name (SHA1 string)
	* Any unique initial portion of name
	* Symrefs (e.g. HEAD)
	* branch names (refers to branch tip)
	* Above suffixed with ^*n (e.g. ^, ^^) == the nth ancestor
	* Above suffixed with -<n> == the nth ancestor
	* Above suffixed with ^<n> == the nth parent, if multiple
	* tag name (created with git tag)

Filenames can be preceeded by a commit (e.g. tag:<filename>)

gittutorial-2
gitworkflows
gitcore-tutorial

Object relationships:
	* commit-> tree (snapshot of commit), parent(s), author,
   		   committer
	* tree -> tree (subdirectory), blob (file)
	* blob -> (nothing)
	* Annotated tag -> commit (pretty sure)

Symbolic references:
	* Branch: Heads of branches imply branches, and are stored in
   	  refs/heads/<branchname>
	* Light tag: Symbolic reference to any commit:
   	  refs/tag/<tagname>
	* Remotes: Mirrors of branches in remote repositories:
   	  refs/remotes/<remotename>/<branchname> (?)

git diff by default compares the working directory against the index
file.  You can specify an argument (e.g. HEAD) in which case it will
compare against that.

git add stores a new blog and put a reference to it in the index
file. 

X?? If adding a new file, does it store a new tree?  It doesn't look
   like it, but I'm not completely sure.  It appears not;
   interesting.  git write-tree (done as part of git-commit) creates
   the tree object.  Hmmm.

?? Are trees nested in a commit?
?? Does a commit refer to all directories in the repository, just the
   ancestors of files in the commit, or just the directories containing
   files in the commit?

?? index is binary; what's it's format?

-- The index file doesn't change because of a commit.  Just the list
   of files that git currently knows about?  path mapping to object
   (blob) reference?

?? What manipulations of symbolic references are done in the process
   of cloning a repository, creating a remote branch, and pushing and
   fetching.  I think this means the following man pages:
	* git-remote
   	* git-clone
	* git-fetch
	* git-pull (may be skippable)
	* git-branch
	* git-tag


gitcli(7) summary:
	* Revisions generally come before paths on command lines
	* If an argument could be either, put a -- between revisions
   	  and paths.
	* --cached: Directs a command that usually works on files in the
   	  working tree to *only* work with the index.
	* --index: Directs a command that usually works on files in the
   	  working tree to *also* work with the index.

?? There's a .git/branches directory; what is it?

Remote urls are stores in the config file.
   	  
?? Why do we need logs directory?

?? What is a basis?  (The thing that needs to be specified when using
   git bundle)

?? Can I create my own git commands by putting git-<cmd> on my path?   

   I don't think I'm going to be able to answer this theoretically
   :-J.  Try it and see.

* Git subversion bridges

* Cheat sheet writeup tood

-- Git pager cascade
-- Revision control list spec (general arg spec, I think).
-- Ways to specify things commits; there are an amazing number.



* Todo

-- To read:
	gitworkflows
	gitrepository-layout
	gitglossary
	git top level page



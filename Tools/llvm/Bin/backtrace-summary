#!/usr/bin/env python 
# At least on the mac, I really don't trust python to be in a consistent 
# place, so I'm using the path.

import math
import os.path
import re
import sys
from optparse import OptionParser

enable_debugging = 0

(program_directory, program_name) = os.path.split(sys.argv[0])
help_string = """
%(program_name)%s is a program to take some set of backtraces from lldb in
a simple format, and output a graphviz file that represents the combination
of the backtraces.  Lines will be drawn with a log weight according to the
number of times that call happened, and tooltips will show the filename and 
line number.
Format expected is:

\s*frame #\d+: <function_name>\s+at\s+<filename+lineno>

Lines not matching this format will be ignored.
""" % { 'program_name' : program_name }

usage_string = "%s <backtrace input>"

parser = OptionParser(description=help_string, usage=usage_string)
parser.add_option("-?", action="help")
parser.add_option("-D", "--debug", help="Enable script debugging",
                  type="int", dest="debug", default=0, metavar="DBGLVL")
## Further options here; template follows.  
## All args are optional; if action is store_true/false, no extra
## args are consumed.
## parser.add_option({opts-short or long}, ..., dest={}, help={},
##		     type={}, default={}, metavar={},
##		     nargs={}, choices={}, callback={}, 

(options, args) = parser.parse_args()

# Process any non-flag arguments
if len(args) > 1:
    print >> sys.stderr, "Expected usage: %s" % usage_string
    sys.exit(2)

frame_regexp = re.compile("\s*frame #(\d+):\s*(\S+)\s+at\s+(\S+)\s*")

inp = open(args[0])
last_frame = None
last_index = -1
nodes = {}
calls = {}
for line in inp:
    mo = frame_regexp.match(line)
    if not mo:
        continue
    
    if int(mo.group(1)) < last_index:
        last_frame = None

    id_tuple = (mo.group(2), mo.group(3))
    nodes[id_tuple] = -1
    if last_frame:
        calls.setdefault((id_tuple, last_frame), 0)
        calls[(id_tuple, last_frame)] += 1

    last_frame = id_tuple
    last_index = int(mo.group(1))

print "digraph backtrace {"

node_num = 0
for node in nodes:
    nodes[node] = node_num
    print 'node_%d [label="%s", tooltip="%s"];' % (node_num, node[0], node[1])
    node_num += 1
    
for edge in calls:
    print 'node_%d -> node_%d [penwidth="%d"]' % (nodes[edge[0]], nodes[edge[1]], math.log(calls[edge], 5.0)+1)

print "};"

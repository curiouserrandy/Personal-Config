#!/bin/bash 

# Setup the help and usage messages
progname=`basename $0`
tf=/tmp/$$.helpfile
cat > $tf <<EOF
$progname is a program to bring the masetr branch
of the current git chrome repository to last known good status.
If a number is provided on the command line, that is the revision to sync to.
Options:
	-m		Only valid if done on a branch other than master.
			After executing the base of the command, switch
			back to this branch and merge master into it.
	-M		Only valid if done on a branch other than master.
			If done on a branch other than master, brings
			master to the "git merge-base' of that branch
			and the trunk line (i.e. it may move master
			forward).
	-t		Merge to top of tree rather than LKGR.
	-G		Skip automatic gclient sync.
	-q 		Just print LKGR and exit.
	-b 		Also sync up blink repository.
EOF
helpString="`cat $tf`" ;
rm -f $tf;
usageString="$progname [-m | -t | -M | -G | <revision number>]";

# Parse all arguments.
merge_to_base=no
merge_to_original=no
merge_to_tot=no
do_gclient_sync=yes
print_lkgr=no
sync_blink=no
while [ $# -ne 0 ]; do
    case $1 in 
    # Repeat as needed.
    -M) merge_to_base=yes;
	;;
    -m) merge_to_original=yes;
        ;;
    -G) do_gclient_sync=no;
	;;
    -t) merge_to_tot=yes;
        ;;
    -q) print_lkgr=yes;
	;;
    -b) sync_blink=yes;
	;;
    -h|-\?)
	echo "$helpString" 1>&2;
	exit 1;
	;;
    --) shift;		# Everything after this point is taken as
	break;		# regular args.
	;;
    -*)
	echo "Usage: $usageString" 1>&2;
	exit 1;
	;;
    *)  break;
	;;
    esac
    shift;
done

# So that we avoid the funky submodule stuff and can use git svn find-rev.
originbranch=origin/git-svn

# Assuming new workflow.

# What's my current branch?
current_branch=`git branch | awk '$1 == "*" {print $2;}'`

# Check non-flag arguments.
if [ $# -gt 1 ]; then
    echo "Usage: $usageString <rev>" 1>&2;
    exit 1;
fi
# Only one of -m/-t/rev ok.
rev_spec_count=0
if [ "$merge_to_base" = "yes" ]; then
    rev_spec_count=`expr $rev_spec_count + 1`;
fi
if [ "$merge_to_tot" = "yes" ]; then
    rev_spec_count=`expr $rev_spec_count + 1`;
fi
if [ $# -eq 1 ]; then
    rev_spec_count=`expr $rev_spec_count + 1`;
fi
if [ $rev_spec_count -gt 1 ]; then
    echo "Only one of -t, -m, or <rev> allowed." 1>&2;
    exit 1;
fi  
if [ "$do_gclient_sync" = "no" -a "$sync_blink" = "yes" ]; then
    echo "Can't sync blink if not syncing!?" 1>&2;
    exit 1;
fi
if [ "$merge_to_original" = "yes" -a "$current_branch" = "master" ]; then
    echo "Can't merge trunk to original branch if original branch is master!" 1>&2;
    exit 1;
fi

if [ "$print_lkgr" = "yes" -a \( "$merge_to_base" = "yes" -o "$merge_to_original" = "yes" -o "$go_gclient_sync" = "no" -o "$merge_to_tot" = "yes" \) ]; then
    echo "-q must be specified by itself." 1>&2;
    exit 1;
fi

if [ "$merge_to_base" = "yes" ]; then
    if [ "$current_branch" = "master" ]; then
        echo "-m only valid on non-master branch." 1>&2;
	exit 1;
    fi

    if [ $# -gt 0 ]; then
        echo "Usage: $usageString <rev>" 1>&2;
	exit 1;
    fi
fi

## Find gclient root
gclient_root=""
save_dir=$PWD
while [ ! -r $PWD/.gclient -a "$PWD" != "/" ]; do
    cd ..
done
if [ ! -r $PWD/.gclient ]; then
    echo "Can't find .gclient file in any ancestor directory." 1>&2;
    exit 1;
fi
if [ ! -d $PWD/src ]; then
    echo "Source root doesn't have src/ directory?!" 1>&2;
    exit 1;
fi
gclient_root=$PWD
cd $save_dir

gclient_spec_arg=""
if [ "$sync_blink" = "yes" ]; then
    if [ ! -r $gclient_root/.gclient-blink ]; then
	echo "Can't find .gclient-blink file in gclient directory." 1>&2;
	exit 1;
    fi
    gclient_spec_arg="--gclientfile=$gclient_root/.gclient-blink";
fi

## For DEPS grep below.
if [ ! -r $gclient_root/src/DEPS ]; then
    echo "No file $gclient_root/src/DEPS" 1>&2;
    exit 1;
fi

lkgr=`curl http://chromium-status.appspot.com/lkgr`
if [ "$print_lkgr" = "yes" ]; then
    echo "LKGR is $lkgr"
    exit 0
fi

if ! git-treeclean; then
    exit 1;  # git-treeclean will have output error message.
fi   
set -e					# Shouldn't be needed, but better safe..
git fetch --all

if [ $# -eq 1 ]; then
    lkgr=$1
elif [ "$merge_to_base" = "yes" ]; then
    git fetch --all
    merge_commit="`git merge-base HEAD $originbranch`";
    lkgr=`git log -1 $merge_commit | sed -n '/git-svn-id/s/^.*@\([0-9]*\) .*$/\1/p'`
    if [ "`echo $lkgr | wc -l`" -ne 1 -o "lkgr" = "" ]; then
        echo "Problem with determining merge base.  Commit: $merge_commit, Revision: $lkgr" 1>&2
	exit 1;
    fi
elif [ "$merge_to_tot" = "yes" ]; then
    lkgr=`git log -1 $originbranch | sed -n '/git-svn-id/s/^.*@\([0-9]*\) .*$/\1/p'`
    if [ X"$lkgr" = X"" ]; then
	lkgr=`git log -1 $originbranch | sed -n '/SVN changes/s/^[ 	]*SVN changes up to revision \([0-9]*\)/\1/p'`;
	if [ X"$lkgr" = X"" ]; then
	    echo "Could not find top of tree SVN revision." 1>&2
	    exit 1;
	fi
    fi
fi
echo Syncing to revision $lkgr
git svn fetch
lkgr_git_commit=`git svn find-rev r$lkgr`

if [ "$current_branch" = "master" ]; then
  # Turns out you can't force update the current branch.  Who knew?
  git reset --hard $lkgr_git_commit
else
  git branch -f master $lkgr_git_commit
fi
echo Trunkbranch reset to SVN revision $lkgr


merge_succeeded=0               # If we didn't do it, it suceeded
if [ "$merge_to_original" = "yes" ]; then
    ## Note that we're still on the starting branch
    echo "Merging master into $current_branch"
    set +e   # Doing my own exit code management for merge.
    git merge master
    merge_succeeded=$?
    if [ $merge_succeeded -ne 0 ]; then
        echo "===> Merge Failed."
    fi
    set -e
else
    ## If we didn't ask for a merge, we implicitly asked to switch to trunk.
    git checkout master
fi

if [ "$do_gclient_sync" = "no" -o $merge_succeeded -ne 0 ]; then
    echo "===> Did not do automatic gclient sync."    
    exit $merge_succeeded;
fi    

## Sync blink first, if doing so, so gclient runhooks will work.

if [ "$sync_blink" = "yes" ]; then
    blink_revision=`sed -n '/webkit_revision/s/^.*"\([0-9]*\)".*$/\1/p' DEPS`
    cd $gclient_root/src/third_party/WebKit
    git fetch --all
    blink_commit=`git log --grep='trunk@'$blink_revision' ' origin/master | head -1 | awk '{print $2;}'`

    current_blink_branch=`git branch | awk '$1 == "*" {print $2;}'`

    if [ "$current_blink_branch" = "master" ]; then
	git reset --hard $blink_commit
    else 
	git branch -f master $blink_commit
    fi
    if [ $? -ne 0 ]; then
	echo "Reset of blink master failed" 1>&2;
	exit 1;
    fi

    git merge --no-edit master
    if [ $? -ne 0 ]; then
	echo "Merge of blink master into current branch failed" 1>&2;
	exit 1;
    fi

    cd $gclient_root/src
fi

CC=clang CXX=clang++ gclient sync -j12 -D $gclient_spec_arg
if [ $? -ne 0 ]; then
    echo "===> Gclient sync failed." 1>&2;
    exit 1;
fi

## Todo: Merge master into all branches tracking master.  Maybe.


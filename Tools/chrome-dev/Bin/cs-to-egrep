#!/usr/bin/env python 
# At least on the mac, I really don't trust python to be in a consistent 
# place, so I'm using the path.

import os.path
import re
import sys
from optparse import OptionParser

enable_debugging = 0

(program_directory, program_name) = os.path.split(sys.argv[0])
help_string = """
%s is a program that takes on standard input (or as a single argument)
a file containing the XREF output from code search, and outputs a list of 
lines suitable for use in an emacs grep buffer.
""" % program_name

usage_string = "%s <input-file>"

parser = OptionParser(description=help_string, usage=usage_string)
parser.add_option("-?", action="help")
parser.add_option("-D", "--debug", help="Enable script debugging",
                  type="int", dest="debug", default=0, metavar="DBGLVL")
## Further options here; template follows.  
## All args are optional; if action is store_true/false, no extra
## args are consumed.
## parser.add_option({opts-short or long}, ..., dest={}, help={},
##		     type={}, default={}, metavar={},
##		     nargs={}, choices={}, callback={}, 

(options, args) = parser.parse_args()

# Process any non-flag arguments
if len(args) > 1:
    print >> sys.stderr, "Expected usage: %s" % usage_string
    sys.exit(2)


if len(args) == 1:
    input_to_read = open(args[0])
else:
    input_to_read = sys.stdin

filename = ""
for l in input_to_read:
    mo = re.match("\s*([^\s]*)\s*\(\d+ occurrences?\)", l)
    if mo:
        filename = mo.group(1)
        if filename[0:4] == "src/":
            filename = filename[4:]
        continue
    mo = re.match("\s*(\d+)\s*(.*)$", l)
    if mo:
        print "%s:%s: %s" % (filename, mo.group(1), mo.group(2))


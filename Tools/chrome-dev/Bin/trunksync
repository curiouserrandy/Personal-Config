#!/bin/bash 

# Setup the help and usage messages
progname=`basename $0`
tf=/tmp/$$.helpfile
cat > $tf <<EOF
$progname is a program to bring the masetr branch
of the current git chrome repository to ToT.  If a number is provided on
the command line, that is the revision (either SVN or pseudo) to sync to.
Options:
	-m		Only valid if done on a branch other than master.
			After executing the base of the command, switch
			back to this branch and merge master into it.
	-M		Only valid if done on a branch other than master.
			If done on a branch other than master, brings
			master to the "git merge-base' of that branch
			and the trunk line (i.e. it may move master
			forward).
	-G		Skip automatic gclient sync.
	-b 		Also sync up blink repository.
EOF
helpString="`cat $tf`" ;
rm -f $tf;
usageString="$progname [-m | -t | -M | -G | <revision number>]";

# Parse all arguments.
merge_to_base=no
merge_to_original=no
do_gclient_sync=yes
sync_blink=no
while [ $# -ne 0 ]; do
    case $1 in 
    # Repeat as needed.
    -M) merge_to_base=yes;
	;;
    -m) merge_to_original=yes;
        ;;
    -G) do_gclient_sync=no;
	;;
    -b) sync_blink=yes;
	;;
    -h|-\?)
	echo "$helpString" 1>&2;
	exit 1;
	;;
    --) shift;		# Everything after this point is taken as
	break;		# regular args.
	;;
    -*)
	echo "Usage: $usageString" 1>&2;
	exit 1;
	;;
    *)  break;
	;;
    esac
    shift;
done

# So that we avoid the funky submodule stuff and can use git svn find-rev.
originbranch=origin/git-svn

# Assuming new workflow.

# What's my current branch?
current_branch=`git branch | awk '$1 == "*" {print $2;}'`

# Check non-flag arguments.
if [ $# -gt 1 ]; then
    echo "Usage: $usageString <rev>" 1>&2;
    exit 1;
fi
# Only one of -m/-t/rev ok.
rev_spec_count=0
if [ "$merge_to_base" = "yes" ]; then
    rev_spec_count=`expr $rev_spec_count + 1`;
fi
if [ $# -eq 1 ]; then
    rev_spec_count=`expr $rev_spec_count + 1`;
fi
if [ $rev_spec_count -gt 1 ]; then
    echo "Only one of -t, -m, or <rev> allowed." 1>&2;
    exit 1;
fi  
if [ "$do_gclient_sync" = "no" -a "$sync_blink" = "yes" ]; then
    echo "Can't sync blink if not syncing!?" 1>&2;
    exit 1;
fi
if [ "$merge_to_original" = "yes" -a "$current_branch" = "master" ]; then
    echo "Can't merge trunk to original branch if original branch is master!" 1>&2;
    exit 1;
fi

if [ "$merge_to_base" = "yes" ]; then
    if [ "$current_branch" = "master" ]; then
        echo "-m only valid on non-master branch." 1>&2;
	exit 1;
    fi

    if [ $# -gt 0 ]; then
        echo "Usage: $usageString <rev>" 1>&2;
	exit 1;
    fi
fi

## Find gclient root
gclient_root=""
save_dir=$PWD
while [ ! -r $PWD/.gclient -a "$PWD" != "/" ]; do
    cd ..
done
if [ ! -r $PWD/.gclient ]; then
    echo "Can't find .gclient file in any ancestor directory." 1>&2;
    exit 1;
fi
if [ ! -d $PWD/src ]; then
    echo "Source root doesn't have src/ directory?!" 1>&2;
    exit 1;
fi
gclient_root=$PWD
cd $save_dir

gclient_spec_arg=""
if [ "$sync_blink" = "yes" ]; then
    if [ ! -r $gclient_root/.gclient-blink ]; then
	echo "Can't find .gclient-blink file in gclient directory." 1>&2;
	exit 1;
    fi
    gclient_spec_arg="--gclientfile=$gclient_root/.gclient-blink";
fi

## For DEPS grep below.
if [ ! -r $gclient_root/src/DEPS ]; then
    echo "No file $gclient_root/src/DEPS" 1>&2;
    exit 1;
fi

if ! git-treeclean; then
    exit 1;  # git-treeclean will have output error message.
fi   

## Map a commit to a revision.
commit_to_rev () {
    commit_msg=`git log -1 $1`;
    rev=`echo $commit_msg | sed -n '/Cr-Commit-Position/s/^.*Cr-Commit-Position: refs\/heads\/master@{#\([0-9]*\)}.*$/\1/p'`
    if [ X"$rev" = X"" ]; then
	rev=`echo $commit_msg | sed -n '/Cr-Commit-Position/s/^.*git-svn-id: .*src@\([0-9]*\).*$/\1/p'`
    fi
    echo $rev;
}

rev_to_commit () {
    commit=`git log --grep 'Cr-Commit-Position: refs/heads/master@{#'"$1"'}' --format='format:%H%n' origin/master`
    if [ X"$commit" = X"" ]; then
	commit=`git log --grep 'git-svn-id: .*src@'"$1"'.*$' --format='format:%H%n' origin/master`
    fi
    echo $commit;
}

set -e					# Shouldn't be needed, but better safe..
git fetch --all

if [ $# -eq 1 ]; then
    if echo $1 | grep '[0-9]*' > /dev/null; then
	# It's probably a revision
	sync_commit=`rev_to_commit $1`
	if [ X"$sync_commit" = X"" ]; then
	    echo "Empty commit returned from rev_to_commit!?" 1>&2;
	    exit 1;
	fi
    else
	sync_commit=$1
    fi
elif [ "$merge_to_base" = "yes" ]; then
    sync_commit="`git merge-base HEAD $originbranch`";
else
    sync_commit=origin/master;
fi
sync_rev=`commit_to_rev $sync_commit`
echo Syncing to revision $sync_rev

if [ "$current_branch" = "master" ]; then
  # Turns out you can't force update the current branch.  Who knew?
  git reset --hard $sync_commit
else
  git branch -f master $sync_commit
fi
echo Trunkbranch reset to \'revision\' $sync_rev

merge_succeeded=0               # If we didn't do it, it suceeded
if [ "$merge_to_original" = "yes" ]; then
    ## Note that we're still on the starting branch
    echo "Merging master into $current_branch"
    set +e   # Doing my own exit code management for merge.
    git merge --no-edit master
    merge_succeeded=$?
    if [ $merge_succeeded -ne 0 ]; then
        echo "===> Merge Failed."
    fi
    set -e
else
    ## If we didn't ask for a merge, we implicitly asked to switch to trunk.
    git checkout master
fi

if [ "$do_gclient_sync" = "no" -o $merge_succeeded -ne 0 ]; then
    echo "===> Did not do automatic gclient sync."    
    exit $merge_succeeded;
fi    

## Sync blink first, if doing so, so gclient runhooks will work.

if [ "$sync_blink" = "yes" ]; then
    blink_revision=`sed -n '/webkit_revision/s/^.*"\([0-9]*\)".*$/\1/p' DEPS`
    cd $gclient_root/src/third_party/WebKit
    git fetch --all
    blink_commit=`git log --grep='trunk@'$blink_revision' ' origin/master | head -1 | awk '{print $2;}'`

    current_blink_branch=`git branch | awk '$1 == "*" {print $2;}'`

    if [ "$current_blink_branch" = "master" ]; then
	git reset --hard $blink_commit
    else 
	git branch -f master $blink_commit
    fi
    if [ $? -ne 0 ]; then
	echo "Reset of blink master failed" 1>&2;
	exit 1;
    fi

    git merge --no-edit master
    if [ $? -ne 0 ]; then
	echo "Merge of blink master into current branch failed" 1>&2;
	exit 1;
    fi

    cd $gclient_root/src
fi

gclient sync -j12 -D $gclient_spec_arg
if [ $? -ne 0 ]; then
    echo "===> Gclient sync failed." 1>&2;
    exit 1;
fi

## Todo: Merge master into all branches tracking master.  Maybe.


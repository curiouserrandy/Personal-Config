#!/bin/bash

# Setup the help and usage messages
progname=`basename $0`
tf=/tmp/$$.helpfile
cat > $tf <<EOF
$progname pushes the specified patch (or the current branch if none
specified on the command line) from the central patch repository.  Flags:
	-d 		Delete the central copy of the branch before push.
EOF
helpString="`cat $tf`" ;
rm -f $tf;
usageString="$progname [-d] [<branch name>]";

force=
# Parse all arguments.
while [ $# -ne 0 ]; do
    case $1 in 
    -d) 
	force=-f;	# Nuke remote repository
	;;
    # Repeat as needed.
    -h|-\?)
	echo "$helpString" 1>&2;
	exit 1;
	;;
    --) shift;		# Everything after this point is taken as
	break;		# regular args.
	;;
    -*)
	echo "Usage: $usageString" 1>&2;
	exit 1;
	;;
    *)  break;
	;;
    esac
    shift;
done

# Check non-flag arguments.
if [ $# -gt 1 ]; then
    echo "Usage: $usageString" 1>&2;
    exit 1;
fi

current_branch=`git branch | awk '$1 == "*" {print $2;}'`

if [ $# -gt 0 ]; then
    target_branch=$1
else
    target_branch=$current_branch
fi

## If we're pushing a branch other than the current, we don't care if the 
## tree is dirty.
if [ "$target_branch" = "$current_branch" ]; then
    if ! git-treeclean ; then 
        exit 1				# Error message already output
    fi
fi

if [ "$target_branch" = "origin/trunk" -o \
     "$target_branch" = "trunk" -o \
     "$target_branch" = "master" ]; then
    echo "Not on a development branch: $target_branch" 1>&2
    exit 1
fi

if ! git branch | sed 's/^..//' | grep -w "$target_branch" > /dev/null; then
  echo "Specified branch $target_branch not in repository." 1>&2;
  exit 1
fi

git push $force $chrome_patches $target_branch:$target_branch
     
     

#!/usr/bin/env python 
# At least on the mac, I really don't trust python to be in a consistent 
# place, so I'm using the path.

import os.path
import sys
from optparse import OptionParser
import csv
import operator
import urllib
import re

enable_debugging = 0

(program_directory, program_name) = os.path.split(sys.argv[0])
help_string = """
%s is a program to automatically snarf bugs from the chromium issues 
tracker and produce a spreadsheet grouping them by grouping issue.
""" % program_name

usage_string = "%s [-o <output_file_prefix>] [-b <buglist>] [-m <milestone>]" % program_name

parser = OptionParser(description=help_string, usage=usage_string)
parser.add_option("-?", action="help")
parser.add_option("-D", "--debug", help="Enable script debugging",
                  type="int", dest="debug", default=0, metavar="DBGLVL")
parser.add_option("-o", dest="outfile", help="Output file Prefix",
                  default="rollup")
parser.add_option("-b", "--bugs", dest="buglist",
                  help="Specify a bug or list of bugs to include to start",
                  default="")
parser.add_option("-m", "--milestone", dest="milestone", type="string",
                  metavar="MILESTONE",
                  help="Milestone targetted bugs to include.")

## Further options here; template follows.  
## All args are optional; if action is store_true/false, no extra
## args are consumed.
## parser.add_option({opts-short or long}, ..., dest={}, help={},
##		     type={}, default={}, metavar={},
##		     nargs={}, choices={}, callback={}, 

(options, args) = parser.parse_args()

# Process any non-flag arguments
if len(args) > 0:
    print >> sys.stderr, "Expected usage: %s" % usage_string
    sys.exit(2)

# TDOD: CSV mods
url_template = ("http://code.google.com/p/chromium/issues/csv?" +
                "can=2&q=%s&sort=%s&colspec=%s")

cols=('ID', 'Stars', 'Pri', 'Type', 'Status', 'Summary', 
      'Owner', 'Mstone', 'OS', 'BlockedOn', 'Blocking')
sort_cols=('Blocking', 'BlockedOn', 'ID')
query="Feature=Downloads"

url = url_template % (query, "+".join(sort_cols), "+".join(cols))

## Put everything into issue_dict
issue_dict = {}
in_first_row = True
line_count = 0
# Using reader rather than DictReader because of a bug in DictReader;
# I was getting keys with the name "OwnerMstone", which was bogus.
for l in csv.reader(urllib.urlopen(url)):
    line_count += 1
    if in_first_row:
        header_fields = l
        in_first_row = False
        continue
    if not l: continue                  # Blank line

    ldict = dict(zip(header_fields, l))

    ## Convert appropriate to integer
    for key in ('ID', 'Stars'):
        ldict[key] = int(ldict[key])
    for key in ('BlockedOn', 'Blocking'):
        ldict[key] = [int(y) for y in ldict[key].split(",") if y]

    id = ldict['ID']
    ## Enter into full issue dict
    issue_dict[id] = ldict

## Get some important summary stats
grouping_issues = frozenset(
    [id for id in issue_dict
     if issue_dict[id]['Summary'] .find('grouping issue)') != -1])

## Write it all out
outfile = open(options.outfile + ".csv", 'w')
csvwriter = csv.writer(outfile)
csvwriter.writerow(("", "Warning: This spreadsheet is periodically overwritten.",))
csvwriter.writerow(("","If you need permanent access to the data here, please make a copy.",))
csvwriter.writerow(("",))

def format_cell(col, contents):
    if col == 'ID':
        return '=hyperlink("http://crbug.com/%d"; "%d")' % (contents, contents)
    elif col == 'Blocking' or col == 'Blocked':
        if len(contents) == 0:
            return ''
        elif len(contents) == 1:
            return str(contents[0])
        else:
            return '"' + ", ".join(map(str, contents)) + '"'
    else:
        return contents

issue_list_url_template = "http://code.google.com/p/chromium/issues/list?can=1&q=%s&colspec=ID+Stars+Pri+Area+Feature+Type+Status+Summary+Modified+Owner+Mstone+OS&x=mstone&y=area&cells=tiles"

def issue_list_url(issues):
    return issue_list_url_template % (
        "+OR+".join(map(lambda a: "id:" + str(a),issues)))

all_issues_template = "javascript:var buglist=[%s]; for (var i=0; i <buglist.length; i++) { window.open('http://crbug.com/' + buglist[i]); }"

def all_issue_url(issues):
    return all_issues_template % ", ".join(map(str,issues))

## TODO(rdsmith): Write a javascript url that will bring up each issue
## in a separate tab.

def output_issues(title, output_cols, from_dict,
                  issue_filter, sort_fn = lambda a,b: cmp(a,b),
                  limit = None):
    issues = [id for id in issue_dict if issue_filter(issue_dict[id])]
    issues.sort()
    if limit:
        issues = issues[:limit]
    if len(issues) == 0: return []
    csvwriter.writerow(
        (title, '=hyperlink("%s", "Issue List")' % issue_list_url(issues)))
    csvwriter.writerow(output_cols)
    for id in issues:
        idict = issue_dict[id]
        csvwriter.writerow([format_cell(c, idict[c]) if fd else ""
                        for (c,fd) in zip(output_cols,from_dict)])
    csvwriter.writerow(("",))
    return issues

global_output_cols = ("ID", "Summary", "Blocking", "Status", "Mstone", "Stars",
                      "Randy Rec", "Jeff Rec", "Notes")
global_from_dict = (True, True, True, True, True, True, False, False, False)

exclude_issues = frozenset(grouping_issues)

## Issues listed as special
if options.buglist:
    actual_list=map(int, options.buglist.split(","))
    assert len(actual_list) != 0
    assert reduce(operator.or_,
                  map(lambda a: a in issue_dict, actual_list))
        
    exclude_issues = exclude_issues.union(
        output_issues("Special issues", global_output_cols,
                      global_from_dict,
                      lambda a: a['ID'] in actual_list))

## Untriaged issues that aren't blocking a grouping issue.
exclude_issues = exclude_issues.union(
    output_issues("Issues to Prioritize (Confirmed Orphaned + Untriaged)",
                  global_output_cols, global_from_dict,
                  lambda a:
                      (a['ID'] not in exclude_issues and 
                       ((not grouping_issues.intersection(a['Blocking']) and
                         a['Status'] != "Unconfirmed") or
                        a['Status'] == "Untriaged"))))

## Milestone targetted issues (note not participating in excluded issues). 
if options.milestone:
    output_issues("MStone-%s Issues" % options.milestone, 
                  global_output_cols, global_from_dict,
                  lambda a: (a['Mstone'] == options.milestone))

## Untriaged issues
exclude_issues = exclude_issues.union(
    output_issues("Unconfirmed Orphaned Issues", global_output_cols,
                  global_from_dict,
                  lambda a: (a['ID'] not in exclude_issues and
                             a['Status'] == "Unconfirmed" and
                             not grouping_issues.intersection(a['Blocking']))))

## High star issues
exclude_issues = exclude_issues.union(
    output_issues("High Star Issues", global_output_cols,
                  global_from_dict, lambda a: a['ID'] not in exclude_issues,
                  lambda a,b: -cmp(a["Stars"], b["Stars"]),
                  10))


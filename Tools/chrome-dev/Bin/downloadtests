#!/bin/sh

## Just compile and run all download tests; output to stdout.  Stop if 
## compile fails.  Single argument -1 means use DISPLAY=:1.0

# Setup the help and usage messages
progname=`basename $0`
tf=/tmp/$$.helpfile
cat > $tf <<EOF
$progname compiles and runs all known download tests in the current 
sandbox.  Arguments:
	-1	Set DISPLAY=:1.0 before running tests.
	-R	Build release rather than debug.
	-S	Override sandbox check (e.g. for svn sandboxes)
EOF
helpString="`cat $tf`" ;
rm -f $tf;
usageString="$progname [-1] [-R]";

# Parse all arguments.
set_display=no
build_config=
sandbox_check=yes
while [ $# -ne 0 ]; do
    case $1 in 
    -1) 
	set_display=yes;
	;;
    -R) 
	build_config=BUILDTYPE=Release
	;;
    -S) sandbox_check=no;
        ;;
    # Repeat as needed.
    -h|-\?)
	echo "$helpString" 1>&2;
	exit 1;
	;;
    --) shift;		# Everything after this point is taken as
	break;		# regular args.
	;;
    -*)
	echo "Usage: $usageString" 1>&2;
	exit 1;
	;;
    *)  break;
	;;
    esac
    shift;
done

# Check non-flag arguments.
if [ $# -ne 0 ]; then
    echo "Usage: $usageString" 1>&2;
    exit 1;
fi

if [ "$sandbox_check" = "yes" ]; then
    if [ `/bin/pwd | sed 's;^.*/;;'` != "src" -o ! -d .git ]; then
        echo "Not in sandbox top level." 1>&2
        /bin/pwd
        /bin/pwd | sed 's;^.*/;;'
        exit 1;
    fi
fi

if [ "$set_display" = "yes" ]; then
    export DISPLAY=:1.0
    shift
    if ! xdpyinfo > /dev/null 2>&1 ; then
        echo "Couldn't contact display :1.0" 1>&2
        exit 1;
    fi
fi

## Get initial list of files in ~/Downloads

ls ~/Downloads > /tmp/InitialFileList$$

chrmake -k $build_config unit_tests content_unittests test_shell_tests browser_tests ui_tests pyautolib
if [ $? -ne 0 ]; then
    echo "Compilation failed with error code $?" 1>&2
    exit 1;
fi

echo "=== Unit tests."

out/Debug/unit_tests \
	--gtest_filter=BaseFileTest.*:DownloadRequestInfobar.*:DownloadRequestLimiterTest.*:DownloadStatusUpdaterTest:DownloadUtilTest.*:SavePackageTest.*:HistoryTest.*:DownloadManagerTest.*:DownloadUtiTest.*;

echo "=== Content Unit tests."

out/Debug/content_unittests \
	--gtest_filter=BaseFileTest.*:DownloadRequestInfobar.*:DownloadRequestLimiterTest.*:DownloadStatusUpdaterTest:DownloadUtilTest.*:SavePackageTest.*:HistoryTest.*:DownloadManagerTest.*:DownloadUtiTest.*;

echo "=== Test Shell tets."

out/Debug/test_shell_tests \
	--gtest_filter=GlueSErializeTest.GetPostInfoTest   

echo "=== Browser tests."

out/Debug/browser_tests --gtest_also_run_disabled_tests \
	--gtest_filter=SavePageBrowserTest.*:DownloadTest.*:BrowserCloseTest.DownloadsCloseCheck*;

echo "=== UI tests."

out/Debug/ui_tests --gtest_also_run_disabled_tests \
	--gtest_filter=SavePageTest.*;

echo "=== Python automation server tests."

python chrome/test/functional/downloads.py

ls ~/Downloads > /tmp/FinalFileList$$
if ! diff -q /tmp/InitialFileList$$ /tmp/FinalFileList$$ > /dev/null ; then
    echo "=== Turds left in downloads output directory"
    comm -13 /tmp/InitialFileList$$ /tmp/FinalFileList$$
fi

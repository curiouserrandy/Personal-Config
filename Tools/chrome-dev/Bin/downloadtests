#!/bin/sh

## Just compile and run all download tests; output to stdout.  Stop if 
## compile fails.  Single argument -1 means use DISPLAY=:1.0

# Setup the help and usage messages
progname=`basename $0`
tf=/tmp/$$.helpfile
cat > $tf <<EOF
$progname compiles and runs all known download tests in the current 
sandbox.  Arguments:
	-1	Set DISPLAY=:1.0 before running tests.
	-R	Build release rather than debug.
	-S	Override sandbox check (e.g. for svn sandboxes)
EOF
helpString="`cat $tf`" ;
rm -f $tf;
usageString="$progname [-1] [-R]";

# Parse all arguments.
set_display=no
build_config=
sandbox_check=yes
while [ $# -ne 0 ]; do
    case $1 in 
    -1) 
	set_display=yes;
	;;
    -R) 
	build_config=BUILDTYPE=Release
	;;
    -S) sandbox_check=no;
        ;;
    # Repeat as needed.
    -h|-\?)
	echo "$helpString" 1>&2;
	exit 1;
	;;
    --) shift;		# Everything after this point is taken as
	break;		# regular args.
	;;
    -*)
	echo "Usage: $usageString" 1>&2;
	exit 1;
	;;
    *)  break;
	;;
    esac
    shift;
done

# Check non-flag arguments.
testname=
if [ $# != 0 ]; then
  testname=$1;
  shift;
  rest_of_args="$*"
fi

if [ "$sandbox_check" = "yes" ]; then
    if [ `/bin/pwd | sed 's;^.*/;;'` != "src" -o ! -d .git ]; then
        echo "Not in sandbox top level." 1>&2
        /bin/pwd
        /bin/pwd | sed 's;^.*/;;'
        exit 1;
    fi
fi

if [ "$set_display" = "yes" ]; then
    export DISPLAY=:1.0
    shift
    if ! xdpyinfo > /dev/null 2>&1 ; then
        echo "Couldn't contact display :1.0" 1>&2
        exit 1;
    fi
fi

## What's our base revision and branch?
echo -n "Branch: " ; git branch | sed -n '/^\* /s/\* //p'
git log -1

## Get initial list of files in ~/Downloads and ~/Documents

ls ~/Downloads > /tmp/DFFileList$$
if [ -d ~/Documents ]; then
    ls ~/Documents > /tmp/DocFileList$$
fi

if [ X"$testname" != X"" ]; then
    nice chrmake -k 10 $build_config $testname
    if [ $? -ne 0 ]; then
        echo "Compilation failed with error code $?" 1>&2
        exit 1;
    fi
    out/Debug/$testname $rest_of_args
else
    ionice -c 3 nice chrmake -k 10 $build_config unit_tests content_unittests test_shell_tests content_browsertests browser_tests pyautolib chromedriver
    if [ $? -ne 0 ]; then
        echo "Compilation failed with error code $?" 1>&2
        exit 1;
    fi

    echo "=== Unit tests."

    out/Debug/unit_tests \
            --gtest_filter=BaseFileTest.*:DownloadRequestInfobar.*:DownloadRequestLimiterTest.*:DownloadStatusUpdaterTest.*:DownloadUtilTest.*:SavePackageTest.*:HistoryTest.*:DownloadManagerTest.*:DownloadRequestInfobarDelegate.*:DownloadRequestLimiterTest.*:BaseFileTest.*:DownloadSBClientTest.*:DownloadBufferTest.*:DownloadFileTest.*:DownloadIdTest.*:DownloadItemTest.*:HistoryBackendDBTest.*:HistoryProfileTest.TypicalProfileVersion:DownloadHistoryTest.*

    echo "=== Content Unit tests."

    out/Debug/content_unittests \
            --gtest_filter=BaseFileTest.*:DownloadRequestInfobar.*:DownloadRequestLimiterTest.*:DownloadStatusUpdaterTest.*:DownloadUtilTest.*:SavePackageTest.*:HistoryTest.*:DownloadManagerTest.*:DownloadRequestInfobarDelegate.*:DownloadRequestLimiterTest.*:BaseFileTest.*:DownloadSBClientTest.*:DownloadBufferTest.*:DownloadFileTest.*:DownloadIdTest.*:ByteStreamTest.*:ResourceDispatcherHostTest.IgnoreCancelForDownloads:ResourceDispatcherHostTest.CancelRequestsForContext:DownloadFileManagerTest.*:DownloadItemTest.*;

    echo "=== Test Shell tests."

    out/Debug/test_shell_tests \
            --gtest_filter=GlueSerializeTest.GetPostInfoTest   

    echo "=== Content Browser tests."

    out/Debug/content_browsertests --gtest_filter=DownloadContentTest.*

    echo "=== Browser tests."

    out/Debug/browser_tests --gtest_also_run_disabled_tests \
            --gtest_filter=SavePageBrowserTest.*:DownloadTest.*:BrowserCloseTest.*DownloadsCloseCheck*:MHTMLGenerationTest.*:DownloadsApiTest.*:DownloadExtensionTest.*;

    echo "=== Python automation server tests."

    ## See http://crbug.com/114769
    if [ X"$build_config" != X"" ];then
        export LD_LIBRARY_PATH=out/Release/lib
    else
        export LD_LIBRARY_PATH=out/Debug/lib
    fi
    python chrome/test/functional/downloads.py
    python chrome/test/functional/browsing_data.py __main__.BrowsingDataTest.testClearDownloads __main__.BrowsingDataTest.testClearHistoryAndDownloads __main__.BrowsingDataTest.testClearingAccuracy
    python chrome/test/functional/history.py __main__.HistoryTest.testDownloadNoHistory
    python chrome/test/functional/infobars.py __main__.InfobarTest.testMultipleDownloadsInfobar
    python chrome/test/functional/prefs.py __main__.PrefsTest.testDownloadDirPref
fi

ls ~/Downloads > /tmp/DFFileList2$$
if ! diff -q /tmp/DFFileList$$ /tmp/DFFileList2$$ > /dev/null ; then
    echo "=== Turds left in downloads output directory"
    comm -13 /tmp/DFFileList$$ /tmp/DFFileList2$$
fi

if [ -d ~/Documents ]; then
    ls ~/Documents > /tmp/DocFileList2$$
    if ! diff -q /tmp/DocFileList$$ /tmp/DocFileList2$$ > /dev/null ; then
        echo "=== Turds left in downloads output directory"
        comm -13 /tmp/DocFileList$$ /tmp/DocFileList2$$
    fi
fi
rm -f /tmp/DFFileList$$ /tmp/DFFileList2$$ /tmp/DocFileList$$ /tmp/DocFileList2$$

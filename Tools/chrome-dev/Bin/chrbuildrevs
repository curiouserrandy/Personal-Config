#!/usr/bin/env python 
# At least on the mac, I really don't trust python to be in a consistent 
# place, so I'm using the path.

import os.path
import sys
from optparse import OptionParser
import re
import subprocess

enable_debugging = 0

## TODO: Enhance chrcomm to return Debug/Release info/output directory
## info for particular targets.

(program_directory, program_name) = os.path.split(sys.argv[0])
help_string = """
%s is a program for building a specific set of chrome revisions.  Each
revision will be saved in {Release,Debug}-r<num>, and the build output 
will be saved in {Release,Debug}-r<num>.log in whatever directory the 
platform normally builds on.  Args:
	-c <config>		Debug or Release.  Defaults to Release.
	-t target		Target to build (argument to chrcomm).
				Defaults to chrome.  Note that this must
				match the -c arg.  
	<revrange>		Revisions to build.  <revrange> is either
				a single number (e.g. 59432) or a range
				(59432-59434).  
""" % program_name

usage_string = "%s [-c <config>] [-t <target>] <revrange>" % program_name;

parser = OptionParser(description=help_string, usage=usage_string)
parser.add_option("-?", action="help")
parser.add_option("-D", "--debug", help="Enable script debugging",
                  type="int", dest="debug", default=0, metavar="DBGLVL")
## Further options here; template follows.  
## All args are optional; if action is store_true/false, no extra
## args are consumed.
## parser.add_option({opts-short or long}, ..., dest={}, help={},
##		     type={}, default={}, metavar={},
##		     nargs={}, choices={}, callback={}, 
parser.add_option("-c", "--config",
                  help="Configuration (Debug/Release) to build; must match config or target.",
                  type="string", dest="config", default="Debug", metavar="CFG")
parser.add_option("-t", "--target",
                  help="Target to build (argument to chrcomm).  Must match config argument.",
                  type="string", dest="target", default="chrome",
                  metavar="TARGET")

(options, args) = parser.parse_args()

# Process any non-flag arguments
if len(args) > 1:
    print >> sys.stderr, "Expected usage: %s" % usage_string
    sys.exit(2)

mo = re.search("^(\d+)(?:-(\d+))?$", args[0])
if not mo:
    print >> sys.stderr, "Revrange %s not supported." % args[0]
    sys.exit(1)

first_rev = int(mo.group(1))
last_rev = mo.group(2)
if last_rev:
    last_rev = int(last_rev)
else:
    last_rev = first_rev
assert last_rev >= first_rev

def check_output(args, **kwargs):
    """Intended to emulate subprocess.check_output"""
    kwargs['stdout'] = subprocess.PIPE
    po = subprocess.Popen(args, **kwargs)
    output = po.communicate()
    if po.returncode != 0:
        print >> sys.stderr, "Subprocess [%s] failed with error code %d" % (", ".join(args), po.returncode)
        sys.exit(1)
    return output[0]

def build_rev(revision, target, config):
    check_output(["git", "svn", "find-rev", "r%d" % revision])
    git_commit = check_output(["git", "svn", "find-rev", "r%d" % revision])
    git_commit = git_commit[:-1]
    tmp = check_output(["git", "checkout", git_commit])
    tmp = check_output(['gclient', 'sync'])
    outfile = open("chrbuildrevs-%s-r%d.log" % (target, revision), "w")
    return subprocess.call(["chrcomm", target], stdout=outfile, stderr=outfile)

for rev in range(first_rev, last_rev+1):
    rc = build_rev(rev, options.target, options.config)
    if rc != 0:
        print "Building revision %d failed with error code %d" % (rev, rc)
        
    # Figure out which platform we're on and where the output directory is
    # and move it.
    outdirs = { 'darwin' : 'xcodebuild',
                'linux' : 'out',
                'windows' : 'build' }

    # I don't want rename, because I want repeated builds to go fast.
    # So I copy, via tar.
    (indir, outdir) = ("%s/%s" % (outdirs[sys.platform], options.config),
                       "%s/%s-r%d" % (outdirs[sys.platform], options.config,
                                      rev))
    tmp = check_output(("mkdir %s &&(cd %s;tar cf - . )|(cd %s; tar xf -)"
                        % ( outdir, indir, outdir)), shell = True)
           


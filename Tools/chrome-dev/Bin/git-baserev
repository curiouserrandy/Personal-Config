#!/bin/bash

# Setup the help and usage messages
progname=`basename $0`
tf=/tmp/$$.helpfile
cat > $tf <<EOF
$progname is determines the svn revision that a chromium branch is based on 
and outputs that along with the last time the branch was modified. 
It does this by finding the most recent revision on origin/git-svn that 
the branch is derived from, and parsing it's revision spec.  
By default it outputs the 10 most recently modified branches, with base 
revision.  If given arguments, it outputs the branches listed as arguments
along with the master branch.
Note that this will sometimes be inaccurate if a branch was created in 
another checkout from an svn revision not yet retrieved into this checkout.
Arguments:
<<<<<<< HEAD
	* -f: Do an initial 'git fetch --all'.  Useful when some of the
	  patches are from other repositories with more recent master branches.
||||||| merged common ancestors
	* -F: Do not do the initial 'git fetch --all'.  Useful in
	  offline contexts.
=======
	* -f: Do an initial 'git fetch --all'.  This takes some time, but
	  will guarantee correct results even if a branch was originally
	  created (in some other checkout) from a point on the git-svn
	  branch that has not yet been retrieved.  
>>>>>>> 701b65ae8e7251d71d45faf4dd2c5be9f6fa1a22
EOF
helpString="`cat $tf`" ;
rm -f $tf;
usageString="$progname -F <branch> <branch> ...";

# Parse all arguments.
fetchall=no;
while [ $# -ne 0 ]; do
    case $1 in 
    -f)
        fetchall=yes;
	;;
    # Repeat as needed.
    -h|-\?)
	echo "$helpString" 1>&2;
	exit 1;
	;;
    --) shift;		# Everything after this point is taken as
	break;		# regular args.
	;;
    -*)
	echo "Usage: $usageString" 1>&2;
	exit 1;
	;;
    *)  break;
	;;
    esac
    shift;
done

if [ $# -ne 0 ]; then
    branches="$* master";
fi

if [ "$fetchall" = "yes" ]; then
    git fetch --all 
fi

if [ X"$branches" = X"" ]; then
    branches=`git branch | (while read branch_name branch2; do
      if [[ '*' = $branch_name ]]; then branch_name=$branch2; fi;
      echo \`git log -1 --format=format:%ai $branch_name --\` $branch_name ;
    done) | sort -nr | head $limit | awk '{print $4;}'`
fi

set $branches
echo -e 'Rev\tCL\t\tLast Modified\t\t\tBranch'
while [ $# -ne 0 ]; do
    branch=$1;
    shift;
    base_commit=`git merge-base $branch origin/git-svn`
    svn_rev=r`git log -1 $base_commit | sed -n '/git-svn-id/s/^.*@\([0-9]*\).*$/\1/p'`
    base_time=`git log -1 --format=format:%ai $branch | awk '{print $1, $2, $3;}'`
    issue=`git config branch.$branch.rietveldissue`
    if [ X"$issue" = X"" ]; then
        issue="        "
    fi
    echo -e "$svn_rev\t$issue\t$base_time\t$branch"
done

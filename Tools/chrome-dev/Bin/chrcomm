#!/bin/bash

# A simple list of commands that I regularly want to do.

platform=`uname`

# Command strings for targets are in variable ${${platform}_${target}}

## Linux

function linux_build () {
    config=$1
    target=$2
    echo chrmake BUILDTYPE=$1 $2
}

function linux_build_and_run () {
    config=shift;
    target=shift;
    args="$*";			# Not ideal, as doesn't preserve tokenization.

    echo "chrmake BUILDTYPE=$1 $2 && out/$config/$exec_name $args"
}


Linux_test="`linux_build_and_run Debug net_unittests --gtest_filter=CookieMonsterTest.*`"
Linux_perf="`linux_build_and_run Release net_perftests --gtest_filter=CookieMonsterTest.* --gtest_repeat=10`"
Linux_perfdbg="`linux_build_and_run Debug net_perftests --gtest_filter=CookieMonsterTest.*`"
Linux_full="`linux_build Debug 'net_unittests browser_tests unit_tests'` && out/Debug/net_unittests --gtest_filter=CookieMonsterTest.* && out/Debug/browser_tests --gtest_filter=ExtensionApiTest.Cookies && out/Debug/unit_tests --gtest_filter=CookiesTreeModelTest.OriginOrdering:CookiesViewTest.FilterRemove"
Linux_chrome="`linux_build Debug chrome`"
Linux_chrome_rel="`linux_build Release chrome`"

function darwin_build_and_run_net () {
    echo "xcodebuild -project net/net.xcodeproj -target $2 -configuration $1 -parallelizeTargets && xcodebuild/Debug/$2 $3"
}

function darwin_build_browser () {
    echo xcodebuild -project chrome/chrome.xcodeproj -target chrome -configuration $1 -parallelizeTargets
}

Darwin_test="`darwin_build_and_run_net Debug net_unittests --gtest_filter=CookieMonsterTest.*`"
Darwin_perf="`darwin_build_and_run_net Release net_perftests --gtest_filter=CookieMonsterTest.* --gtest_repeat=10`"
Darwin_perfdbg="`darwin_build_and_run_net Debug net_perftests --gtest_filter=CookieMonsterTest.*`"
Darwin_chrome="`darwin_build_browser Debug`"
Darwin_chrome_rel="`darwin_build_browser Release`"
# Complex; work out when you need it.
# Darwin_full="`linux_build Debug 'net_unittests browser_tests unit_tests'` && out/Debug/net_unittests --gtest_filter=CookieMonsterTest.* && out/Debug/browser_tests --gtest_filter=ExtensionApiTest.Cookies && out/Debug/unit_tests --gtest_filter=CookiesTreeModelTest.OriginOrdering:CookiesViewTest.FilterRemove"

# Setup the help and usage messages
progname=`basename $0`
tf=/tmp/$$.helpfile
cat > $tf <<EOF
$progname is a simple case statement for commands that I often want to 
run in developing chrome.  List:
	test		Run the cookie monster unit tests in debug mode
	perf		Run the cookie monster perf tests in release mode
			with repeat 10
	perfdbg		Single debug run of perf test.
	full		Run all tests known (debug) for cookies.
	chrome		Build chrome browser.
	chrome_rel	Build chrome browser release version.
EOF
helpString="`cat $tf`" ;
rm -f $tf;
usageString="$progname [test|perf|full]";

# Parse all arguments.
while [ $# -ne 0 ]; do
    case $1 in 
    # Repeat as needed.
    -h|-\?)
	echo "$helpString" 1>&2;
	exit 1;
	;;
    --) shift;		# Everything after this point is taken as
	break;		# regular args.
	;;
    -*)
	echo "Usage: $usageString" 1>&2;
	exit 1;
	;;
    *)  break;
	;;
    esac
    shift;
done

# Check non-flag arguments.
if [ $# -ne 1 ]; then
    echo "Usage: $usageString" 1>&2;
    exit 1;
fi

target=$1
varname=${platform}_$target
cmd_var=${!varname}
if [ X"$cmd_var" = X"" ]; then
    echo "Don't know how to build $1 for platform $platform" 1>&2
    exit 1
fi

echo $cmd_var
$cmd_var    
